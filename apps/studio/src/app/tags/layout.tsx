import { defaultLayout } from "@/helpers/config";
import { api } from "@/trpc/server";
import {
  Button,
  ResizableHandle,
  ResizablePanel,
  ScrollArea,
} from "@packages/ui";
import type { Metadata } from "next";
import Image from "next/image";
import Link from "next/link";
import { ReactNode } from "react";
import { TiPlus } from "react-icons/ti";

export const metadata: Metadata = {
  title: process.env.NEXT_PUBLIC_STUDIO_APP_NAME,
  description: "Generated by create next app",
};

export default async function StudioTagLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  const tags = await api.tag.getAllMetaProtect();

  return (
    <>
      <ResizableHandle withHandle />
      <ResizablePanel defaultSize={defaultLayout[1]} className="">
        <div className="flex items-center justify-between border-b p-4">
          <h2 className="text-2xl font-semibold">Tags</h2>
          <Link href="/tags/new">
            <Button role="button">
              <TiPlus className="h-4 w-4" />
              <span className="ml-2">New Tag</span>
            </Button>
          </Link>
        </div>
        <ScrollArea className="h-[calc(83vh)] p-2">
          {tags.map((tag) => (
            <div
              key={tag.id}
              className="mb-4 flex items-center justify-between rounded-md p-2 hover:bg-neutral-700 "
            >
              <Link href={"/tags/" + tag.id} key={tag.id}>
                <div className="flex items-center gap-4">
                  <div className="relative h-16 w-16">
                    <Image
                      src={tag.photo || "https://via.placeholder.com/100"}
                      alt={tag.name}
                      fill
                      className="rounded-md object-cover"
                      sizes="100px"
                    />
                  </div>
                  <div className="flex flex-col gap-1">
                    <h3 className="text-lg font-medium">{tag.name}</h3>
                    <time dateTime={tag.updatedAt?.toISOString()}>
                      {tag.updatedAt?.toDateString()}
                    </time>
                  </div>
                </div>
              </Link>
            </div>
          ))}
        </ScrollArea>
      </ResizablePanel>
      <ResizableHandle withHandle />
      {children}
    </>
  );
}
